#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
radio_delay

Delays a sports radio broadcast by an adjustable amount to sync up with TV.
"""

import sys
import argparse
import alsaaudio
import time

def setup_output():
    """
    Set up the audio output
    """
    
    # NOTE: This is currently a copy of code from the pyalsaaudio
    # playbacktest.py example.

    # Open the device in playback mode. 
    out = alsaaudio.PCM(alsaaudio.PCM_PLAYBACK, device='default')

    # Set attributes: Mono, 44100 Hz, 16 bit little endian frames
    out.setchannels(1)
    out.setrate(44100)
    out.setformat(alsaaudio.PCM_FORMAT_S16_LE)

    # The period size controls the internal number of frames per period.
    # The significance of this parameter is documented in the ALSA api.
    out.setperiodsize(160)

    return out


def setup_input():
    """
    Setup the audio input
    """

    # NOTE: This is currently a copy of code from the pyalsaaudio
    # recordtest.py example.

    # Open the device in nonblocking capture mode. The last argument could
    # just as well have been zero for blocking mode. Then we could have
    # left out the sleep call in the bottom of the loop
    inp = alsaaudio.PCM(alsaaudio.PCM_CAPTURE, alsaaudio.PCM_NONBLOCK, device='default')

    # Set attributes: Mono, 44100 Hz, 16 bit little endian samples
    inp.setchannels(1)
    inp.setrate(44100)
    inp.setformat(alsaaudio.PCM_FORMAT_S16_LE)

    # The period size controls the internal number of frames per period.
    # The significance of this parameter is documented in the ALSA api.
    # For our purposes, it is suficcient to know that reads from the device
    # will return this many frames. Each frame being 2 bytes long.
    # This means that the reads below will return either 320 bytes of data
    # or 0 bytes of data. The latter is possible because we are in nonblocking
    # mode.
    inp.setperiodsize(160)

    return inp


def radio_delay(delay):
    """
    Send delayed sound input to sound output

    Arguments:
        delay: Delay in seconds
    """

    out = setup_output()
    inp = setup_input()

    max_index = 4000
    sound_buffer = [None] * max_index 
    input_index = 0
    output_index = 0

    start_time = time.process_time()

    # Until we reach our delay time, simply buffer data
    while time.process_time() - start_time < delay:
        l, data = inp.read()

        if l:
            sound_buffer[input_index] = data
            
            input_index += 1

            # If buffer size is reached, exit
            if input_index > max_index * 0.9:
                print("Buffer size exceeded")
                return 1

            time.sleep(.001)

    print(input_index)

    # Now that we've exceeded our pause, output old data while recording new
    while True:
        l, data = inp.read()

        if l:
            sound_buffer[input_index] = data

            input_index += 1
            if input_index >= max_index:
                input_index = 0

            out.write(sound_buffer[output_index])

            output_index += 1
            if output_index >= max_index:
                output_index = 0

            time.sleep(.001)


if __name__ == '__main__':
    def main(cmdln_args):
        """
        Set up and parse arguments

        Arguments:
            cmdln_args: List of command line arguments (excluding script name)
        """

        # Parse arguments with argparse
        formatter_class = argparse.ArgumentDefaultsHelpFormatter

        parser = argparse.ArgumentParser(description=__doc__,
                                         formatter_class=formatter_class)

        parser.add_argument('--delay',
                            help="Delay (in seconds)",
                            default=60,
                            type=int)

        args = parser.parse_args(cmdln_args)

        radio_delay(args.delay)

    # Call main() with parsed args
    sys.exit(main(sys.argv[1:]))
